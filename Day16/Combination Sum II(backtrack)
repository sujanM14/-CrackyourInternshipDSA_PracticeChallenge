class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        if(candidates==null || candidates.length==0)
        return Collections.emptyList();
        final List <List<Integer>> res= new ArrayList<>();
        Arrays.sort(candidates);
        // for(int i=0;i<candidates.length;i++)
        // System.out.print(candidates[i]+" ");
        backtrack(candidates,target,0,new ArrayList<>(),res);
        return res;
    }
    public void backtrack (int [] arr,int target,int idx,List<Integer> com,List <List<Integer>> res)
    {
        if(target==0)
        {
            res.add(new ArrayList<>(com));
           return;
        }

        for(int i=idx;i<arr.length;i++)
        {
            int newTarget=target-arr[i];
            if(newTarget>=0)
            {
               com.add(arr[i]);
                backtrack(arr,newTarget,i+1,com,res);
                com.remove(com.size()-1);
            }else{
                break;
            }
            while(i<arr.length-1 && arr[i]==arr[i+1])
            i++;
        }
    }
}
