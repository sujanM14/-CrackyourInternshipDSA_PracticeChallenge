class Solution {
    public int GCD(int a,int b){
    
        	if (b==0) return a;
        	else return GCD(b,a%b);
        	
        }
    public int maxPoints(int[][] points) {
        if(points ==null)
        return 0;

        if(points.length<=2)
        return points.length;

        HashMap<Integer,HashMap<Integer,Integer>> mp = new HashMap<Integer,HashMap<Integer,Integer>>();
        int res=0;
        for(int i=0;i<points.length;i++)
        {
            mp.clear();
            int overlap=0,max=0;
            for(int j=i+1;j<points.length;j++)
            {
                int x = points[i][0]- points[j][0];
                int y = points[i][1]- points[j][1];

                if(x==0 && y==0)
                {
                    overlap++;
                    continue;
                }
                int gcd=GCD(x,y);
                if(gcd !=0)
                {
                    x/=gcd;
                    y/=gcd;
                }
                if(mp.containsKey(x))
                {
                    if(mp.get(x).containsKey(y))
                    {
                       mp.get(x).put(y, mp.get(x).get(y)+1); 
                    }else
                    {
                        mp.get(x).put(y, 1);
                    }
                }else{
                    HashMap<Integer,Integer> m = new HashMap<Integer,Integer>();
        				m.put(y, 1);
        				mp.put(x, m);
                }
                max=Math.max(max,mp.get(x).get(y));

            }
            res=Math.max(res,max+overlap+1);

        }
        return res;
    }
}
