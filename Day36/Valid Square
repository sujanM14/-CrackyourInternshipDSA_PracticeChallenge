class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        Set<Integer> set = new HashSet();
        set.add(calculate(p1,p2));
        set.add(calculate(p1,p3));
        set.add(calculate(p1,p4));
        set.add(calculate(p2,p3));
        set.add(calculate(p2,p4));
        set.add(calculate(p3,p4));
      
      return !set.contains(0) && set.size()==2;
        
    }
    public int calculate(int[] a,int[] b)
    {
        return ((a[1]-b[1])*(a[1]-b[1]) + (a[0]-b[0])*(a[0]-b[0]));
    }
}
**********************************************************************************************************
class Solution {
    int line1=0;
    int line2=0;
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
return (calculate2(p1,p2) && calculate2(p1,p3) && calculate2(p1,p4) && calculate2(p2,p3) && calculate2(p2,p4) && calculate2(p3,p4));
        
    }
    public int calculate(int[] a,int[] b)
    {
        return ((a[1]-b[1])*(a[1]-b[1]) + (a[0]-b[0])*(a[0]-b[0]));
    }
    public boolean calculate2(int [] a ,int[] b)
    {
        int d=calculate(a,b);
        if(d==0)
        return false;
        else if(line1 ==0 )
        line1=d;
        else if(line2 ==0 )
        line2=d;
        else if(line2 !=d && line1 !=d )
        return false;

        return true;
    }
}

