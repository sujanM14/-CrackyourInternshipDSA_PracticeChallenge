//The logic behind reusing the same elements to form pairs is based on the fact that if an element can form a pair with a certain value, 
//it can also form a pair with any value greater than that. This allows for optimization and reduces the need for iterating through all the elements.

//The approach used is to break down the array into sorted parts using the merge sort technique. Then, for each sorted part, compute 
//the number of pairs that can be formed



class Solution {
    public int reversePairs(int[] nums) {
      return MergeSort(nums,0,nums.length-1);  
    }
    public int MergeSort(int[] nums,int l,int h)
    {
        if(l>=h)
        return 0;
        
        int mid=l+(h-l)/2;
        int res=MergeSort(nums,l,mid);
        res+=MergeSort(nums,mid+1,h);

        res+=Merge(nums,l,mid,h);
        return res;
    }
    public int Merge(int[] nums,int low,int mid ,int high)
    {
        int count=0;
        int j=mid+1;
        for(int i=low;i<=mid;i++){
            while(j<=high && (long)nums[i]>(long)2*nums[j])
              j++;
              count+=j-(mid+1);                    
        }
        ArrayList<Integer> temp= new ArrayList<>();
        int left=low,right=mid+1;
        while(left<=mid && right<=high)
        {
            if(nums[left]<nums[right])
            {
            temp.add(nums[left]);
            left++;
            }else{
             temp.add(nums[right]);
            right++;
            }
        }
        while(left<=mid)
        {
            temp.add(nums[left]);
            left++;
        }
        while(right<=high)
        {
           temp.add(nums[right]);
           right++;  
        }
        for(int i=low;i<=high;i++)
        {
            nums[i]=temp.get(i-low);
        }
        return count;
    }
}
