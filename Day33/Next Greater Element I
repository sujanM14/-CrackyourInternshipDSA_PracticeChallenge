class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack <Integer> st = new Stack<>();
        int res[]= new int[nums1.length];
        HashMap<Integer,Integer> mp = new HashMap<>();
        for(int i=0;i<nums2.length;i++)
        {
            mp.put(nums2[i],i);
        }
        int k=0;
        for(int i=0;i<nums1.length;i++)
        {
            if(mp.containsKey(nums1[i]) && mp.get(nums1[i])+1 <nums2.length)
            {
                boolean isFill=false;
                for(int j=mp.get(nums1[i])+1 ;j<nums2.length;j++)
                {
                    if(nums2[j]>nums1[i])
                   { res[k]=nums2[j];
                   k++;
                   isFill=true;
                   break;
                    }
                }
                if(!isFill)
                {
                    res[k]=-1;
                    k++;
                }
               
            }else{
               res[k]=-1;
               k++;
            }
        }
        return res;
    }
}



********************************************************************************
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack <Integer> st = new Stack<>();
        int res[]= new int[nums1.length];
        HashMap<Integer,Integer> mp = new HashMap<>();
for(int num:nums2)
      {
          while(!st.isEmpty() && num>st.peek())
          mp.put(st.pop(),num);

          st.push(num);
      }
      int k=0;
      for(int num:nums1)
      res[k++]=mp.getOrDefault(num,-1);
        return res;
    }
}

