public class GFG {
 
  static void reverse(int[] a,int x,int y)
  {
    while(x<y)
    {
      int temp = a[x];
      a[x] = a[y];
      a[y] = temp;
      x++;
      y--;
    }
  }
  static boolean sortArr(int[] a, int n)
  {
    int x = -1;
    int y = -1;
 
    for (int i = 0; i < n - 1; i++) {
      if (a[i] > a[i + 1]) {
        if (x == -1) {
          x = i;
        }
        y = i + 1;
      }
    }
 
    if (x != -1) {
      reverse(a,x,y);
      for (int i = 0; i < n - 1; i++) {
        if (a[i] > a[i + 1]) {
          return false;
        }
      }
    }
 
    return true;
  }
}
**********************************************************************************************
lass GFG {
 
// Return true, if reversing the subarray will sort t
// he array, else return false.
    static boolean checkReverse(int arr[], int n) {
        if (n == 1) {
            return true;
        }
 
        // Find first increasing part
        int i;
        for (i = 1; arr[i - 1] < arr[i] && i < n; i++);
        if (i == n) {
            return true;
        }
 
        // Find reversed part
        int j = i;
        while (j < n && arr[j] < arr[j - 1]) {
            if (i > 1 && arr[j] < arr[i - 2]) {
                return false;
            }
            j++;
        }
 
        if (j == n) {
            return true;
        }
 
        // Find last increasing part
        int k = j;
 
        // To handle cases like {1,2,3,4,20,9,16,17}
        if (arr[k] < arr[i - 1]) {
            return false;
        }
 
        while (k > 1 && k < n) {
            if (arr[k] < arr[k - 1]) {
                return false;
            }
            k++;
        }
        return true;
    }

}
