class Main
{
    /* Function to get index of ceiling
       of x in arr[low..high] */
    static int ceilSearch(int arr[], int low, int high, int x)
    {
      int i;   
         element,then return the first element */
      if(x <= arr[low])
        return low; 

      for(i = low; i < high; i++)
      {
        if(arr[i] == x)
          return i;
        if(arr[i] < x && arr[i+1] >= x)
           return i+1;
      }        
      return -1;
    }
}
*************************************************************************************************************************************************
//Method 2 (Binary Search) 
import java.util.Arrays;
 
public class CeilSearch {
 
    // Function to get index of ceiling of x in arr[low..high]
    public static int ceilSearch(int[] arr, int low, int high, int x) {
        int mid;
 
        /* If x is smaller than or equal to the first element,
           then return the first element */
        if (x <= arr[low])
            return low;
 
        /* If x is greater than the last element,
           then return -1 */
        if (x > arr[high])
            return -1;
 
        /* get the index of middle element of arr[low..high]*/
        mid = (low + high) / 2; /* low + (high - low)/2 */
 
        /* If x is same as middle element,
           then return mid */
        if (arr[mid] == x)
            return mid;
 
        /* If x is greater than arr[mid],
           then either arr[mid + 1] is ceiling of x
           or ceiling lies in arr[mid+1...high] */
        else if (arr[mid] < x) {
            if (mid + 1 <= high && x <= arr[mid + 1])
                return mid + 1;
            else
                return ceilSearch(arr, mid + 1, high, x);
        }
 
        /* If x is smaller than arr[mid],
           then either arr[mid] is ceiling of x
           or ceiling lies in arr[low...mid-1] */
        else {
            if (mid - 1 >= low && x > arr[mid - 1])
                return mid;
            else
                return ceilSearch(arr, low, mid - 1, x);
        }
    }
}
***************************************************************************************************************
//method 3:

class Main {
    /* Function to get index of
       ceiling of x in arr[low..high]*/
    static int ceilSearch(int arr[], int low, int high,
                          int x)
    {
        // base condition if length of arr == 0 then return
        // -1
        if (x == 0) {
            return -1;
        }
        /* this while loop function will run until condition
         not break once condition break loop will return
         start and ans is low which will be next smallest
         greater than target which is ceiling*/
        while (low <= high) {
            int mid
                = low + (high - low) / 2; // calculate mid
 
            if (x == arr[mid]) {
                return mid;
            }
            if (x < arr[mid]) {
                high = mid - 1;
            }
 
            else {
                low = mid + 1;
            }
        }
        return low;
    }
}
