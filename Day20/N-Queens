class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res= new ArrayList<>();
        if(n<=0)
        return res;
        char[][] matrix = new char[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                matrix[i][j]='.';
            }
        }
        helper(matrix,0,res);
        return res;
    }
    public void helper(char[][] matrix ,int row,List<List<String>> res)
    {
        if(row==matrix.length)
        {
            List<String> comb= addToList(matrix);
            res.add(comb);
            return ;

        }
        for(int col=0;col<matrix.length;col++)
        {
            matrix[row][col]='Q';
            if(isSafe(matrix,row,col))
            {
                helper(matrix,row+1,res);
            }
            matrix[row][col]='.';
        }
    }
    public boolean isSafe(char[][] matrix,int row,int col)
    {
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<matrix.length;j++)
            {
                if((col==j || Math.abs(row-i)==Math.abs(col-j)) && matrix[i][j]=='Q')
                return false;
            }
        }
        return true;

    }
    public List<String> addToList(char[][] matrix)
    {
        List<String> addLis=new ArrayList<>();
        for(int i=0;i<matrix.length;i++){
            addLis.add(new String(matrix[i]));
        }
        return addLis;
    }
}
