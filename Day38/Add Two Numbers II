/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int findLength(ListNode node){
    
    int len = 0;
    while(node != null){
        len++;
        node = node.next;
    }
    
    return len;
}
public ListNode addZeros(ListNode head ,int diff)
{
    while(diff>0)
    {
        ListNode l= new ListNode(0);
        l.next=head;
        head=l;
        diff--;
    }
    return head;
}
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=new ListNode();

        int n=findLength(l1);
        int m=findLength(l2);

        if(n<m)
        {
            l1=addZeros(l1,m-n);
        }
        else{
            l2=addZeros(l2,n-m);
        }

        int x=helper(l1,l2,head);
        if(x!=0)
        {
            ListNode newNode=new ListNode(x);
            newNode.next=head;
            head=newNode;
        }
        return head;
        // return helper2(l1,l2,0);
    }
    public int helper(ListNode l1, ListNode l2 ,ListNode l)
    {

        if(l1==null && l2==null)
        {   
            return 0;
        }
        ListNode newNode=new ListNode();
        if(l1.next!=null)
        l.next=newNode;

        int a=l1.val+l2.val+helper(l1.next,l2.next,l.next);
        int carry=a/10;
        l.val=a%10;
        return carry;

    }
     
}
