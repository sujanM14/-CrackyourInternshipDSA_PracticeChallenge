class Solution {
    int mod = (int) Math.pow(10, 9) + 7;
    public int knightDialer(int n) {
        long dp[][][]= new long[n+1][4][3];
        long ans=0;
        for(int i=0;i<4;i++)
        {
            for(int j=0;j<3;j++)
            {
                ans=(ans+helper(n,i,j,dp))%mod;
            }
        }
        return (int)ans;
       
    }
    public long helper(int n,int i,int j,long[][][] dp)
    {
       if(i>=4 || j>=3 ||i<0 ||j<0 ||(i==3 && j!=1))
        return 0;

        if(n==1)
        return 1;

        if(dp[n][i][j] >0)
        return dp[n][i][j];

        dp[n][i][j]=helper(n-1,i-1,j-2,dp)%mod+ 
                    helper(n-1,i-2,j-1,dp)%mod+
                    helper(n-1,i-2,j+1,dp)%mod+
                    helper(n-1,i-1,j+2,dp)%mod+
                    helper(n-1,i+1,j+2,dp)%mod+
                    helper(n-1,i+1,j-2,dp)%mod+
                    helper(n-1,i+2,j-1,dp)%mod+
                    helper(n-1,i+2,j+1,dp)%mod;
return dp[n][i][j];

    }
}
