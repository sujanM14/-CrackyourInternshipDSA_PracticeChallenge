/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static int height(TreeNode root)
    {
        if(root==null)
        return -1;
         
         int left=height(root.left);
         int right=height(root.right);

         return Math.max(left,right)+1;
    }
    // public static int diameter(TreeNode root)
    // {
    //    if(root==null)
    //     return 0;
    //      int left=height(root.left);
    //      int right=height(root.right);

    //      int leftd=diameter(root.left);
    //       int rightd=diameter(root.right);

    //       int total =right+left+2;
    //       return Math.max(total,Math.max(rightd,leftd));
    // }

        public static int diameter(TreeNode root,int[] ans)
    {
       if(root==null)
        return -1;

         int leftd=diameter(root.left,ans);
          int rightd=diameter(root.right,ans);

          ans[0]=Math.max((rightd+leftd+2),ans[0]);
          return Math.max(rightd,leftd)+1;
    }
    public int diameterOfBinaryTree(TreeNode root) {
        int [] res= new int[1];
        int h1= diameter(root,res);
        return res[0];
    }
}
