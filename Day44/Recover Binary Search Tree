/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     int idx=0;
    TreeNode prev=null,node1=null,node2=null;
    public void recoverTree(TreeNode root) {
    //  ArrayList<Integer> arr= new ArrayList<>();
    //   helper(root,arr);  
    //   Collections.sort(arr);
    //   newTree(root,arr);
      Evaluate(root);
      int temp=node1.val;
      node1.val=node2.val;
      node2.val=temp;
    }
    public void Evaluate(TreeNode root)
    {
        if(root==null)
        return;
        Evaluate(root.left);
        if(prev != null && prev.val > root.val ){
            if(node1==null)
            node1=prev;

            node2=root;
        }
        prev=root;
        Evaluate(root.right);
    }

    public void newTree(TreeNode root,ArrayList<Integer>arr){
        if(root==null)
        return;
        newTree(root.left,arr);
        root.val=arr.get(idx);
        idx++;
        newTree(root.right,arr);


    }
    public void helper(TreeNode root,ArrayList<Integer>arr)
    {
        if(root==null)
        return;
helper(root.left,arr);
arr.add(root.val);
helper(root.right,arr);
    }
}
